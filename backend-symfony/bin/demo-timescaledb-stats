#!/usr/bin/env php
<?php

/**
 * CheckEngine - TimescaleDB Statistics Demo
 *
 * Displays comprehensive statistics about stored trip data:
 * - Hypertable compression status
 * - Data volume and storage size
 * - Trip analytics with time_bucket aggregations
 * - Performance metrics
 */

use App\Entity\Trip;

require __DIR__ . '/../vendor/autoload.php';

$kernel = new \App\Kernel($_SERVER['APP_ENV'] ?? 'dev', (bool) ($_SERVER['APP_DEBUG'] ?? true));
$kernel->boot();
$container = $kernel->getContainer();

$em = $container->get('doctrine')->getManager();
$connection = $em->getConnection();

echo "\n";
echo "üöó CheckEngine - TimescaleDB Statistics\n";
echo str_repeat('=', 70) . "\n\n";

// 1. Hypertable information
echo "üìä HYPERTABLE STATUS\n";
echo str_repeat('-', 70) . "\n";

$hypertableInfo = $connection->fetchAssociative("
    SELECT
        hypertable_name,
        num_dimensions,
        num_chunks,
        compression_enabled,
        tablespaces
    FROM timescaledb_information.hypertables
    WHERE hypertable_name = 'trip_data'
");

if ($hypertableInfo) {
    echo "   Hypertable: {$hypertableInfo['hypertable_name']}\n";
    echo "   Chunks: {$hypertableInfo['num_chunks']}\n";
    echo "   Compression: " . ($hypertableInfo['compression_enabled'] ? '‚úì Enabled' : '‚úó Disabled') . "\n";
    echo "   Dimensions: {$hypertableInfo['num_dimensions']}\n";
}

// 2. Storage statistics
echo "\nüì¶ STORAGE STATISTICS\n";
echo str_repeat('-', 70) . "\n";

$storageStats = $connection->fetchAssociative("
    SELECT
        pg_size_pretty(pg_total_relation_size('trip_data')) as total_size,
        pg_size_pretty(pg_relation_size('trip_data')) as table_size,
        pg_size_pretty(pg_indexes_size('trip_data')) as indexes_size
");

echo "   Total size: {$storageStats['total_size']}\n";
echo "   Table size: {$storageStats['table_size']}\n";
echo "   Index size: {$storageStats['indexes_size']}\n";

// 3. Data volume
echo "\nüìà DATA VOLUME\n";
echo str_repeat('-', 70) . "\n";

$dataVolume = $connection->fetchAssociative("
    SELECT
        COUNT(*) as total_rows,
        COUNT(DISTINCT trip_id) as total_trips,
        COUNT(DISTINCT pid_name) as unique_pids,
        MIN(timestamp) as earliest,
        MAX(timestamp) as latest
    FROM trip_data
");

echo "   Total data points: " . number_format($dataVolume['total_rows']) . "\n";
echo "   Total trips: {$dataVolume['total_trips']}\n";
echo "   Unique PIDs: {$dataVolume['unique_pids']}\n";
echo "   Time range: {$dataVolume['earliest']} ‚Üí {$dataVolume['latest']}\n";

// 4. Trip breakdown
echo "\nüöô TRIP BREAKDOWN\n";
echo str_repeat('-', 70) . "\n";

$trips = $connection->fetchAllAssociative("
    SELECT
        t.id,
        t.filename,
        t.status,
        t.duration,
        t.data_points_count,
        t.session_date,
        COUNT(td.id) as actual_data_points
    FROM trip t
    LEFT JOIN trip_data td ON td.trip_id = t.id
    GROUP BY t.id, t.filename, t.status, t.duration, t.data_points_count, t.session_date
    ORDER BY t.id DESC
    LIMIT 10
");

foreach ($trips as $trip) {
    $duration_min = $trip['duration'] ? round($trip['duration'] / 60, 1) : 0;
    echo "   Trip #{$trip['id']}: {$trip['filename']}\n";
    echo "      Status: {$trip['status']}\n";
    echo "      Duration: {$duration_min} minutes\n";
    echo "      Samples: " . number_format($trip['data_points_count'] ?? 0) . "\n";
    echo "      Data points: " . number_format($trip['actual_data_points']) . "\n";
    echo "      Date: {$trip['session_date']}\n\n";
}

// 5. Most common PIDs
echo "üìå TOP 10 MOST RECORDED METRICS\n";
echo str_repeat('-', 70) . "\n";

$topPids = $connection->fetchAllAssociative("
    SELECT
        pid_name,
        COUNT(*) as sample_count,
        ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) as percentage
    FROM trip_data
    GROUP BY pid_name
    ORDER BY sample_count DESC
    LIMIT 10
");

foreach ($topPids as $pid) {
    $count = number_format($pid['sample_count']);
    $pct = $pid['percentage'];
    echo "   {$pid['pid_name']}: {$count} samples ({$pct}%)\n";
}

// 6. Latest trip analytics (if any)
if (!empty($trips)) {
    $latestTripId = $trips[0]['id'];

    echo "\nüîç LATEST TRIP ANALYTICS (Trip #{$latestTripId})\n";
    echo str_repeat('-', 70) . "\n";

    $analytics = $connection->fetchAllAssociative("
        SELECT
            pid_name,
            COUNT(*) as samples,
            ROUND(AVG(value::numeric), 2) as avg_value,
            ROUND(MIN(value::numeric), 2) as min_value,
            ROUND(MAX(value::numeric), 2) as max_value,
            ROUND(STDDEV(value::numeric), 2) as stddev
        FROM trip_data
        WHERE trip_id = :trip_id
          AND pid_name IN ('engine_rpm', 'vehicle_speed', 'coolant_temp', 'engine_load', 'throttle_position')
          AND value IS NOT NULL
        GROUP BY pid_name
        ORDER BY pid_name
    ", ['trip_id' => $latestTripId]);

    if (!empty($analytics)) {
        printf(
            "   %-20s %10s %10s %10s %10s %10s\n",
            'Metric',
            'Samples',
            'Average',
            'Min',
            'Max',
            'StdDev'
        );
        echo "   " . str_repeat('-', 70) . "\n";

        foreach ($analytics as $metric) {
            printf(
                "   %-20s %10s %10s %10s %10s %10s\n",
                $metric['pid_name'],
                number_format($metric['samples']),
                $metric['avg_value'] ?? 'N/A',
                $metric['min_value'] ?? 'N/A',
                $metric['max_value'] ?? 'N/A',
                $metric['stddev'] ?? 'N/A'
            );
        }
    }

    // 7. Time bucket aggregation example
    echo "\n‚è±Ô∏è  TIME-SERIES AGGREGATION (1-minute buckets, first 5 minutes)\n";
    echo str_repeat('-', 70) . "\n";

    $timeBuckets = $connection->fetchAllAssociative("
        SELECT
            time_bucket('1 minute'::interval, timestamp) AS bucket,
            ROUND(AVG(CASE WHEN pid_name = 'engine_rpm' THEN value END), 0) as avg_rpm,
            ROUND(AVG(CASE WHEN pid_name = 'vehicle_speed' THEN value END), 1) as avg_speed,
            ROUND(AVG(CASE WHEN pid_name = 'coolant_temp' THEN value END), 1) as avg_temp
        FROM trip_data
        WHERE trip_id = :trip_id
          AND pid_name IN ('engine_rpm', 'vehicle_speed', 'coolant_temp')
          AND value IS NOT NULL
        GROUP BY bucket
        ORDER BY bucket
        LIMIT 5
    ", ['trip_id' => $latestTripId]);

    if (!empty($timeBuckets)) {
        printf(
            "   %-20s %12s %12s %12s\n",
            'Time',
            'Avg RPM',
            'Avg Speed',
            'Avg Temp'
        );
        echo "   " . str_repeat('-', 70) . "\n";

        foreach ($timeBuckets as $bucket) {
            printf(
                "   %-20s %12s %12s %12s\n",
                $bucket['bucket'],
                $bucket['avg_rpm'] ?? 'N/A',
                $bucket['avg_speed'] ?? 'N/A',
                $bucket['avg_temp'] ?? 'N/A'
            );
        }
    }
}

// 8. Compression statistics (if enabled)
echo "\nüíæ COMPRESSION STATISTICS\n";
echo str_repeat('-', 70) . "\n";

try {
    $compressionStats = $connection->fetchAssociative("
        SELECT 
            COUNT(*) as total_chunks,
            COUNT(CASE WHEN compressed_chunk_id IS NOT NULL THEN 1 END) as compressed_chunks
        FROM _timescaledb_catalog.chunk c
        INNER JOIN _timescaledb_catalog.hypertable h ON c.hypertable_id = h.id
        WHERE h.table_name = 'trip_data'
    ");
    
    if ($compressionStats) {
        $compression_pct = $compressionStats['total_chunks'] > 0 
            ? round($compressionStats['compressed_chunks'] * 100.0 / $compressionStats['total_chunks'], 2) 
            : 0;
        
        echo "   Total chunks: {$compressionStats['total_chunks']}\n";
        echo "   Compressed chunks: {$compressionStats['compressed_chunks']}\n";
        echo "   Compression rate: {$compression_pct}%\n";
        
        if ($compressionStats['compressed_chunks'] == 0) {
            echo "   ‚ÑπÔ∏è  Note: Compression happens automatically after 7 days\n";
        }
    }
} catch (\Exception $e) {
    echo "   Unable to retrieve compression statistics\n";
}echo "\n";
echo str_repeat('=', 70) . "\n";
echo "‚úÖ Statistics complete\n";
echo "\n";
echo "üí° Tips:\n";
echo "   ‚Ä¢ Use time_bucket() for time-series aggregations\n";
echo "   ‚Ä¢ Compression reduces storage by ~90% after 7 days\n";
echo "   ‚Ä¢ Data older than 365 days is automatically purged\n";
echo "   ‚Ä¢ Query performance is optimized by chunk pruning\n";
echo str_repeat('=', 70) . "\n";
