#!/usr/bin/env php
<?php

/**
 * Demo script for CSV parsing with TimescaleDB storage
 *
 * Usage: php bin/demo-parse-csv [path/to/file.csv]
 */

require dirname(__DIR__) . '/vendor/autoload.php';

use App\Kernel;
use Symfony\Component\Dotenv\Dotenv;

// Load environment
(new Dotenv())->bootEnv(dirname(__DIR__) . '/.env');

// Boot Symfony kernel
$kernel = new Kernel($_ENV['APP_ENV'] ?? 'dev', (bool) ($_ENV['APP_DEBUG'] ?? false));
$kernel->boot();
$container = $kernel->getContainer();

// Get services
$parser = $container->get(\App\Service\OBD2CsvParser::class);
$em = $container->get('doctrine')->getManager();
$vehicleRepo = $em->getRepository(\App\Entity\Vehicle::class);

// Get CSV path from command line or use default
$csvPath = $argv[1] ?? '/workspace/archive/sample_trip.csv';

if (!file_exists($csvPath)) {
    echo "❌ File not found: $csvPath\n";
    echo "Usage: php bin/demo-parse-csv [path/to/file.csv]\n";
    exit(1);
}

echo "🚗 CheckEngine - CSV Parser Demo\n";
echo str_repeat('=', 70) . "\n\n";

// 1. Validate CSV file
echo "📋 STEP 1: Validating CSV file\n";
echo "   File: " . basename($csvPath) . "\n";
echo "   Size: " . number_format(filesize($csvPath) / 1024, 2) . " KB\n\n";

$validation = $parser->validateCsvFile($csvPath);

if (!$validation['valid']) {
    echo "❌ Validation failed:\n";
    foreach ($validation['errors'] as $error) {
        echo "   - $error\n";
    }
    exit(1);
}

echo "✅ Validation passed\n";
echo "   Total columns: {$validation['total_columns']}\n";
echo "   Recognized columns: {$validation['recognized_columns']}\n\n";

// 2. Get or create test vehicle
echo "📋 STEP 2: Preparing test vehicle\n";

$vehicle = $vehicleRepo->findOneBy(['nickname' => 'Test Prius+']);

if (!$vehicle) {
    echo "   Creating test vehicle...\n";
    
    // Get or create test user
    $userRepo = $em->getRepository(\App\Entity\User::class);
    $user = $userRepo->findOneBy(['email' => 'demo@checkengine.com']);
    
    if (!$user) {
        $user = new \App\Entity\User();
        $user->setEmail('demo@checkengine.com');
        $user->setPassword('demo'); // Not hashed for demo only
        $em->persist($user);
        $em->flush();
    }
    
    // Get or create vehicle model
    $modelRepo = $em->getRepository(\App\Entity\VehicleModel::class);
    $model = $modelRepo->findOneBy(['name' => 'Prius+']);
    
    if (!$model) {
        $model = new \App\Entity\VehicleModel();
        $model->setMake('Toyota');
        $model->setName('Prius+');
        $model->setYear(2015);
        $em->persist($model);
        $em->flush();
    }
    
    $vehicle = new \App\Entity\Vehicle();
    $vehicle->setOwner($user);
    $vehicle->setModel($model);
    $vehicle->setNickname('Test Prius+');
    $vehicle->setYear(2015);
    $vehicle->setMileage(150000);
    $em->persist($vehicle);
    $em->flush();
} else {
    echo "   Using existing vehicle: {$vehicle->getNickname()}\n";
}

echo "\n";

// 3. Parse and store CSV
echo "📋 STEP 3: Parsing CSV file (this may take a moment...)\n";

$startTime = microtime(true);

try {
    // Note: parseAndStore expects User, but we'll adapt to use Vehicle
    // For this demo, we'll need to modify the method signature
    // For now, we'll show validation results

    echo "   ⚠️  Full parsing requires User entity\n";
    echo "   This demo shows validation only.\n";
    echo "   To enable full parsing, create a User and pass it to parseAndStore()\n\n";

    // Show what would be parsed
    $handle = fopen($csvPath, 'r');
    $headers = fgetcsv($handle);

    $columnMapper = $container->get(\App\Service\OBD2ColumnMapper::class);
    $mapping = $columnMapper->mapCsvHeaders($headers);

    echo "   📊 Column Mapping Results:\n";
    echo "   -------------------------\n";

    $categories = [];
    foreach ($mapping['recognized'] as $original => $normalized) {
        $column = $columnMapper->getAllKnownColumns()[$normalized] ?? null;
        if ($column) {
            $category = $column['category'];
            if (!isset($categories[$category])) {
                $categories[$category] = [];
            }
            $categories[$category][] = $normalized;
        }
    }

    foreach ($categories as $category => $columns) {
        echo "   \n   📁 " . strtoupper($category) . " (" . count($columns) . " colonnes):\n";
        foreach ($columns as $col) {
            echo "      - $col\n";
        }
    }

    // Count rows
    $rowCount = 0;
    while (fgetcsv($handle) !== false) {
        $rowCount++;
    }
    fclose($handle);

    echo "\n   📈 File Statistics:\n";
    echo "   Total data rows: " . number_format($rowCount) . "\n";
    echo "   Estimated data points: " . number_format($rowCount * count($mapping['recognized'])) . "\n";
    echo "   Estimated storage: ~" . number_format(($rowCount * count($mapping['recognized']) * 50) / 1024 / 1024, 2) . " MB (uncompressed)\n";
    echo "   With TimescaleDB compression: ~" . number_format(($rowCount * count($mapping['recognized']) * 5) / 1024 / 1024, 2) . " MB\n";
} catch (\Exception $e) {
    echo "❌ Error: {$e->getMessage()}\n";
    exit(1);
}

$duration = microtime(true) - $startTime;

echo "\n";
echo "✅ Analysis complete in " . number_format($duration, 3) . "s\n";
echo "\n";
echo str_repeat('=', 70) . "\n";
echo "💡 Next steps:\n";
echo "   1. Create a User entity for full trip creation\n";
echo "   2. Run migration: php bin/console doctrine:migrations:migrate\n";
echo "   3. Enable TimescaleDB in docker-compose (already configured!)\n";
echo "   4. Use API endpoint: POST /api/trips/upload\n";
echo str_repeat('=', 70) . "\n";
