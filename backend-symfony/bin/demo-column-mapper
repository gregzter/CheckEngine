#!/usr/bin/env php
<?php

/**
 * Script de démonstration du OBD2ColumnMapper (Version 2.0 - BDD)
 *
 * Analyse le fichier CSV réel et affiche le mapping des colonnes
 * Utilise maintenant le mapping depuis la base de données
 */

require __DIR__ . '/../vendor/autoload.php';

use App\Kernel;
use Symfony\Component\Dotenv\Dotenv;

// Charger les variables d'environnement
(new Dotenv())->bootEnv(__DIR__ . '/../.env');

// Démarrer le kernel Symfony
$kernel = new Kernel($_ENV['APP_ENV'] ?? 'dev', (bool) ($_ENV['APP_DEBUG'] ?? true));
$kernel->boot();
$container = $kernel->getContainer();

// Récupérer le service OBD2ColumnMapper depuis le container
$mapper = $container->get('App\Service\OBD2ColumnMapper');

// Chemin du fichier CSV d'exemple (peut être passé en argument)
$csvPath = $argv[1] ?? __DIR__ . '/../var/tmp/data/trackLog-2025-oct.-23_12-00-00.csv';

if (!file_exists($csvPath)) {
    echo "❌ Fichier CSV non trouvé: $csvPath\n";
    echo "   Extrayez d'abord le fichier ZIP d'exemple.\n";
    exit(1);
}

// Lecture du header CSV
$handle = fopen($csvPath, 'r');
$csvHeaders = fgetcsv($handle);
fclose($handle);

echo "╔══════════════════════════════════════════════════════════════╗\n";
echo "║  OBD2 COLUMN MAPPER - Analyse du fichier Torque Pro         ║\n";
echo "╚══════════════════════════════════════════════════════════════╝\n\n";

// Statistiques générales
$stats = $mapper->getMappingStats($csvHeaders);
echo "📊 STATISTIQUES GÉNÉRALES\n";
echo "   Total colonnes CSV:        {$stats['total_columns']}\n";
echo "   Colonnes reconnues:        {$stats['mapped_columns']}\n";
echo "   Colonnes non reconnues:    {$stats['unmapped_columns']}\n";
echo "   Sources multiples:         {$stats['duplicate_sources']}\n";
echo "   Taux de reconnaissance:    {$stats['mapping_rate']}%\n";
echo "\n";

// Mapping détaillé
$result = $mapper->mapCsvHeaders($csvHeaders);

if (!empty($result['unmapped'])) {
    echo "⚠️  COLONNES NON RECONNUES\n";
    foreach ($result['unmapped'] as $col) {
        echo "   ❌ $col\n";
    }
    echo "\n";
}

if (!empty($result['duplicates'])) {
    echo "🔄 DOUBLONS DÉTECTÉS (plusieurs sources pour la même donnée)\n";
    foreach ($result['duplicates'] as $dbName => $sources) {
        echo "   📌 $dbName:\n";
        foreach ($sources as $source) {
            $marker = ($source === $result['mapped'][$dbName]) ? '✓' : '○';
            echo "      $marker [{$source['priority']}] {$source['csv_column']} (index {$source['index']})\n";
        }
        echo "\n";
    }
}

// Colonnes mappées par catégorie
echo "✅ COLONNES MAPPÉES PAR CATÉGORIE\n\n";

$categories = [
    'Temporel/GPS' => ['timestamp_gps', 'timestamp_device', 'longitude', 'latitude', 'gps_speed_ms', 'gps_altitude', 'gps_bearing', 'gps_accuracy', 'gps_hdop', 'gps_satellites'],
    'Accéléromètre' => ['accel_x', 'accel_y', 'accel_z', 'accel_total'],
    'Sondes Lambda/O2' => ['o2_b1s1_voltage', 'o2_b1s1_voltage_wide', 'o2_b1s1_lambda', 'o2_b1s1_current', 'o2_b1s2_voltage', 'prius_af_lambda', 'prius_afs_voltage'],
    'Air/Fuel Ratio' => ['afr_measured', 'afr_commanded', 'lambda_commanded', 'stft_b1', 'ltft_b1'],
    'Températures' => ['coolant_temp', 'prius_coolant_7c0', 'prius_coolant_7e0', 'prius_coolant_7c4', 'prius_coolant_7e2', 'intake_air_temp', 'prius_iat_7e0', 'prius_iat_7e2', 'ambient_temp', 'catalyst_temp_b1s1', 'catalyst_temp_b1s2'],
    'Régime moteur' => ['engine_rpm', 'prius_rpm_7e0', 'prius_rpm_7e2', 'prius_rpm_cyl1', 'prius_rpm_cyl2', 'prius_rpm_cyl3', 'prius_rpm_cyl4'],
    'Vitesse véhicule' => ['vehicle_speed', 'prius_speed_7b0', 'prius_speed_7e0', 'prius_speed_7e2', 'prius_wheel_speed_fr', 'speed_difference'],
    'Charge/Air' => ['engine_load', 'engine_load_absolute', 'throttle_position', 'maf_rate', 'prius_maf', 'barometric_pressure'],
    'Diagnostics' => ['prius_misfire_count']
];

foreach ($categories as $catName => $columns) {
    $found = [];
    foreach ($columns as $col) {
        if (isset($result['mapped'][$col])) {
            $found[] = $col;
        }
    }

    if (!empty($found)) {
        echo "   📁 $catName (" . count($found) . ")\n";
        foreach ($found as $col) {
            $csvCol = $result['mapped'][$col]['csv_column'];
            echo "      • $col ← \"$csvCol\"\n";
        }
        echo "\n";
    }
}

echo "═══════════════════════════════════════════════════════════════\n";
echo "✓ Analyse terminée avec succès\n";
