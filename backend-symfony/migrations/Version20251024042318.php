<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20251024042318 extends AbstractMigration
{
    public function getDescription(): string
    {
        return 'Configure TimescaleDB hypertable for trip_data with compression and retention policies + add TripDiagnostic table';
    }

    public function up(Schema $schema): void
    {
        // Create trip_diagnostic table
        $this->addSql('CREATE TABLE trip_diagnostic (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, category VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, score INT NOT NULL, confidence VARCHAR(20) NOT NULL, details JSON NOT NULL, messages JSON NOT NULL, recommendations JSON NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, trip_id INT NOT NULL, PRIMARY KEY (id))');
        $this->addSql('CREATE INDEX IDX_F6E539FA5BC2E0E ON trip_diagnostic (trip_id)');
        $this->addSql('ALTER TABLE trip_diagnostic ADD CONSTRAINT FK_F6E539FA5BC2E0E FOREIGN KEY (trip_id) REFERENCES trip (id) NOT DEFERRABLE');

        // Enable TimescaleDB extension (safe if already exists)
        $this->addSql("CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE");

        // Check if trip_data is already a hypertable before converting
        $this->addSql("
            DO \$\$
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 FROM timescaledb_information.hypertables
                    WHERE hypertable_name = 'trip_data'
                ) THEN
                    -- Convert trip_data to hypertable (partitioned by timestamp)
                    PERFORM create_hypertable('trip_data', 'timestamp',
                        chunk_time_interval => INTERVAL '7 days',
                        if_not_exists => TRUE
                    );
                END IF;
            END\$\$;
        ");

        // Enable compression on trip_data
        $this->addSql("
            ALTER TABLE trip_data SET (
                timescaledb.compress,
                timescaledb.compress_segmentby = 'trip_id'
            )
        ");

        // Add compression policy: compress chunks older than 7 days
        $this->addSql("
            SELECT add_compression_policy('trip_data', INTERVAL '7 days', if_not_exists => TRUE)
        ");

        // Add retention policy: drop chunks older than 1 year
        $this->addSql("
            SELECT add_retention_policy('trip_data', INTERVAL '365 days', if_not_exists => TRUE)
        ");

        // Add index on trip_id + timestamp for faster queries
        $this->addSql("
            CREATE INDEX IF NOT EXISTS idx_trip_data_trip_timestamp
            ON trip_data (trip_id, timestamp DESC)
        ");

        // Add composite index for common query patterns
        $this->addSql("
            CREATE INDEX IF NOT EXISTS idx_trip_data_pid_timestamp
            ON trip_data (pid_name, timestamp DESC)
        ");
    }

    public function down(Schema $schema): void
    {
        // Remove TimescaleDB policies and indexes
        $this->addSql("SELECT remove_retention_policy('trip_data', if_exists => TRUE)");
        $this->addSql("SELECT remove_compression_policy('trip_data', if_exists => TRUE)");
        $this->addSql("DROP INDEX IF EXISTS idx_trip_data_trip_timestamp");
        $this->addSql("DROP INDEX IF EXISTS idx_trip_data_pid_timestamp");

        // Remove trip_diagnostic table
        $this->addSql('ALTER TABLE trip_diagnostic DROP CONSTRAINT FK_F6E539FA5BC2E0E');
        $this->addSql('DROP TABLE trip_diagnostic');
    }
}
