name: CI - Tests & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  tests:
    name: PHPUnit Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_DB: checkengine_test
          POSTGRES_USER: checkengine
          POSTGRES_PASSWORD: checkengine_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_pgsql, dom, filter, json, pcov
          coverage: pcov
          tools: composer:v2

      - name: 📦 Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: backend-symfony

      - name: 💾 Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 📥 Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction
        working-directory: backend-symfony

      - name: 🗄️ Setup database
        run: |
          cp .env .env.test.local
          echo "DATABASE_URL=postgresql://checkengine:checkengine_password@localhost:5432/checkengine_test?serverVersion=16&charset=utf8" >> .env.test.local
          php bin/console doctrine:database:create --if-not-exists --env=test
          php bin/console doctrine:migrations:migrate --no-interaction --env=test
        working-directory: backend-symfony

      - name: 🧪 Run PHPUnit tests with coverage
        run: |
          php -d pcov.enabled=1 -d pcov.directory=. vendor/bin/phpunit \
            --coverage-text \
            --coverage-clover=coverage/clover.xml \
            --coverage-html=coverage/html \
            --log-junit=coverage/junit.xml
        working-directory: backend-symfony

      - name: 📊 Generate coverage badge
        uses: cicirello/jacoco-badge-generator@v2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          jacoco-csv-file: backend-symfony/coverage/clover.xml
          badges-directory: .github/badges
          generate-branches-badge: true
          generate-summary: true

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push'
        with:
          files: backend-symfony/coverage/clover.xml
          flags: unittests
          name: CheckEngine-PHP
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 📋 Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: backend-symfony/coverage/junit.xml
          check_name: PHPUnit Test Results

      - name: 💾 Archive coverage results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: backend-symfony/coverage/html
          retention-days: 30

      - name: ✅ Check coverage threshold
        run: |
          COVERAGE=$(php -r "
            \$xml = simplexml_load_file('coverage/clover.xml');
            \$metrics = \$xml->project->metrics;
            \$statements = (int)\$metrics['statements'];
            \$covered = (int)\$metrics['coveredstatements'];
            echo round((\$covered / \$statements) * 100, 2);
          ")
          echo "📊 Coverage: $COVERAGE%"
          
          THRESHOLD=15
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
            exit 1
          fi
          echo "✅ Coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
        working-directory: backend-symfony

  commit-badges:
    name: Commit Coverage Badges
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Generate coverage badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: backend-symfony/coverage/clover.xml
          badges-directory: .github/badges
          generate-branches-badge: true

      - name: 💾 Commit badges
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .github/badges/*.svg
          git diff --quiet && git diff --staged --quiet || git commit -m "📊 Update coverage badges [skip ci]"
          git push
